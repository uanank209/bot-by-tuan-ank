const fs = require('fs-extra');
const path = require('path');
const { createCanvas, loadImage, registerFont } = require('canvas');
const axios = require('axios');

// --- C·∫§U H√åNH GAME ---
const GAME_DURATION = 20; // Th·ªùi gian ch∆°i (gi√¢y)
const COOLDOWN_SECONDS = 10; // Th·ªùi gian ch·ªù gi·ªØa c√°c l·∫ßn ch∆°i
const WRONG_ATTEMPT_LIMIT = 3; // S·ªë l·∫ßn sai t·ªëi ƒëa
const PENALTY_COOLDOWN_MINUTES = 1; // Th·ªùi gian ph·∫°t khi sai qu√° s·ªë l·∫ßn

const GITHUB_SENTENCES_URL = 'https://raw.githubusercontent.com/Kenne400k/commands/refs/heads/main/game/gochudata.json';

let sentences = [];
const playerAttempts = new Map();

// --- H√ÄM H·ªñ TR·ª¢ T·ª∞ ƒê·ªòNG XU·ªêNG D√íNG ---
function wrapText(ctx, text, x, y, maxWidth, lineHeight) {
    const words = text.split(' ');
    let line = '';
    const lines = [];

    for (let n = 0; n < words.length; n++) {
        const testLine = line + words[n] + ' ';
        const metrics = ctx.measureText(testLine);
        const testWidth = metrics.width;
        if (testWidth > maxWidth && n > 0) {
            lines.push(line);
            line = words[n] + ' ';
        } else {
            line = testLine;
        }
    }
    lines.push(line);

    const startY = y - (lines.length - 1) * lineHeight / 2;

    for (let i = 0; i < lines.length; i++) {
        ctx.fillText(lines[i].trim(), x, startY + i * lineHeight);
    }
}
// --- H√ÄM T·∫†O ·∫¢NH CANVAS ---
async function createTypingImage(text) {
    const width = 1200, height = 500;
    const canvas = createCanvas(width, height);
    const ctx = canvas.getContext('2d');

    const gradient = ctx.createLinearGradient(0, 0, width, height);
    gradient.addColorStop(0, '#232526');
    gradient.addColorStop(1, '#414345');
    ctx.fillStyle = gradient;
    ctx.fillRect(0, 0, width, height);

    ctx.textAlign = 'center';
    ctx.textBaseline = 'middle';
    
    const colors = ['#00f6ff', '#ff00f6', '#f6ff00', '#32ff7e', '#ff9f1a'];
    const randomColor = colors[Math.floor(Math.random() * colors.length)];
    
    const fontSize = 60; 
    ctx.font = `bold ${fontSize}px "Signika-SemiBold"`;
    ctx.fillStyle = '#FFFFFF';
    
    ctx.shadowColor = randomColor;
    ctx.shadowBlur = 20;
    
    const maxWidth = width - 150;
    const lineHeight = fontSize * 1.2;
    wrapText(ctx, text, width / 2, height / 2, maxWidth, lineHeight);

    ctx.shadowBlur = 0;
    ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';
    ctx.font = '30px "Signika-SemiBold"';
    ctx.fillText(`G√µ l·∫°i c√¢u tr√™n trong ${GAME_DURATION} gi√¢y!`, width / 2, height - 60);

    return canvas.toBuffer('image/png');
}

module.exports = {
    config: {
        name: "gochu",
        version: "1.0.0",
        hasPermission: 0,
        credits: "Pcoder",
        description: "Luy·ªán k·ªπ nƒÉng g√µ ph√≠m v·ªõi giao di·ªán m·ªõi!",
        commandCategory: "Game",
        usages: "",
        cooldowns: COOLDOWN_SECONDS,
    },

    onLoad: async function() {
        const cacheDir = path.join(__dirname, '../cache');
        await fs.ensureDir(cacheDir);

        const fontUrl = 'https://github.com/Kenne400k/font/raw/refs/heads/main/Signika-SemiBold.ttf';
        const fontPath = path.join(cacheDir, 'Signika-SemiBold.ttf');
        if (!fs.existsSync(fontPath)) {
            try {
                const response = await axios.get(fontUrl, { responseType: 'stream' });
                response.data.pipe(fs.createWriteStream(fontPath));
                console.log("T·∫£i font Signika-SemiBold th√†nh c√¥ng.");
            } catch (error) { console.error("L·ªói khi t·∫£i font:", error.message); }
        }
        
        try {
            registerFont(fontPath, { family: "Signika-SemiBold" });
        } catch(e) { console.error("L·ªói ƒëƒÉng k√Ω font:", e); }

        try {
            console.log("ƒêang t·∫£i d·ªØ li·ªáu c√¢u h·ªèi t·ª´ GitHub...");
            const response = await axios.get(GITHUB_SENTENCES_URL);
            if (Array.isArray(response.data)) {
                sentences = response.data;
                console.log(`T·∫£i th√†nh c√¥ng ${sentences.length} c√¢u h·ªèi cho game G√µ Ch·ªØ Nhanh.`);
            } else {
                console.error("L·ªói: D·ªØ li·ªáu t·ª´ GitHub kh√¥ng ph·∫£i l√† m·ªôt m·∫£ng (array).");
            }
        } catch (error) {
            console.error("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu c√¢u h·ªèi t·ª´ GitHub:", error.message);
        }
    },

    run: async function ({ api, event }) {
        const { threadID, senderID, messageID } = event;
        
        if (sentences.length === 0) {
            return api.sendMessage("Kho d·ªØ li·ªáu c√¢u h·ªèi ƒëang tr·ªëng ho·∫∑c kh√¥ng th·ªÉ t·∫£i ƒë∆∞·ª£c. Vui l√≤ng th·ª≠ l·∫°i sau.", threadID, messageID);
        }
        
        const penaltyData = playerAttempts.get(senderID);
        if (penaltyData && penaltyData.penaltyUntil && penaltyData.penaltyUntil > Date.now()) {
            const remainingTime = Math.ceil((penaltyData.penaltyUntil - Date.now()) / 1000);
            return api.sendMessage(`‚ùå B·∫°n ƒë√£ g√µ sai qu√° nhi·ªÅu l·∫ßn. Vui l√≤ng th·ª≠ l·∫°i sau ${remainingTime} gi√¢y.`, threadID, event.messageID);
        }

        const randomSentence = sentences[Math.floor(Math.random() * sentences.length)];

        try {
            const imageBuffer = await createTypingImage(randomSentence);
            const imagePath = path.join(__dirname, `../../cache/typing_game_${threadID}.png`);
            await fs.writeFile(imagePath, imageBuffer);

            api.sendMessage({
                body: "üî• G√ï CH·ªÆ NHANH üî•\n\nReply (ph·∫£n h·ªìi) tin nh·∫Øn n√†y v·ªõi n·ªôi dung tr√™n ·∫£nh ƒë·ªÉ ch∆°i!",
                attachment: fs.createReadStream(imagePath)
            }, threadID, (err, info) => {
                if (err) return console.error(err);
                
                global.client.handleReply.push({
                    name: this.config.name,
                    messageID: info.messageID,
                    author: senderID,
                    correctAnswer: randomSentence,
                    startTime: Date.now()
                });
                
                fs.unlink(imagePath, (err) => {
                    if (err) console.error("L·ªói khi x√≥a ·∫£nh game:", err);
                });
            });

        } catch (error) {
            console.error("L·ªói khi t·∫°o game g√µ ch·ªØ:", error);
            api.sendMessage("ƒê√£ c√≥ l·ªói x·∫£y ra, kh√¥ng th·ªÉ b·∫Øt ƒë·∫ßu game. Vui l√≤ng th·ª≠ l·∫°i sau.", threadID);
        }
    },

    handleReply: async function ({ api, event, handleReply }) {
        const { threadID, senderID, body, messageID } = event;
        const { author, correctAnswer, startTime, messageID: originalMessageID } = handleReply;

        if (senderID !== author) return;

        const userAnswer = body.trim();
        const timeTaken = Date.now() - startTime;

        const replyIndex = global.client.handleReply.findIndex(r => r.messageID === originalMessageID);
        if (replyIndex !== -1) {
            global.client.handleReply.splice(replyIndex, 1);
        }
        
        api.unsendMessage(originalMessageID).catch(e => console.log(e));

        if (timeTaken > GAME_DURATION * 1000) {
            return api.sendMessage("‚åõ H·∫øt gi·ªù! B·∫°n ƒë√£ kh√¥ng k·ªãp ph·∫£n h·ªìi.", threadID, messageID);
        }

        if (userAnswer === correctAnswer) {
            const timeInSeconds = timeTaken / 1000;
            const words = correctAnswer.split(' ').length;
            const wpm = Math.round((words / timeInSeconds) * 60);

            playerAttempts.delete(senderID);

api.sendMessage(
  "‚úÖ CH√çNH X√ÅC!\n" +
  "------------\n" +
  `üïí Th·ªùi gian: ${timeTaken}ms\n` +
  `üìà T·ªëc ƒë·ªô: ~${wpm} WPM (t·ª´/ph√∫t)\n` +
  "------------",
  threadID,
  messageID
);

        } else {
            let attemptData = playerAttempts.get(senderID) || { count: 0 };
            attemptData.count++;

            if (attemptData.count >= WRONG_ATTEMPT_LIMIT) {
                attemptData.penaltyUntil = Date.now() + PENALTY_COOLDOWN_MINUTES * 60 * 1000;
                attemptData.count = 0;
                playerAttempts.set(senderID, attemptData);
                api.sendMessage(`‚ùå B·∫°n ƒë√£ g√µ sai ${WRONG_ATTEMPT_LIMIT} l·∫ßn! T·∫°m kh√≥a ch∆°i trong ${PENALTY_COOLDOWN_MINUTES} ph√∫t.`, threadID, messageID);
            } else {
                playerAttempts.set(senderID, attemptData);
                api.sendMessage(
                    `‚ùå Sai r·ªìi! B·∫°n c√≤n ${WRONG_ATTEMPT_LIMIT - attemptData.count} l·∫ßn th·ª≠.\n` +
                    `- B·∫°n ƒë√£ g√µ: "${userAnswer}"\n` +
                    `- ƒê√°p √°n ƒë√∫ng: "${correctAnswer}"`,
                    threadID, messageID
                );
            }
        }
    }
};
