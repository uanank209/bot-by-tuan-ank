const axios = require("axios");
const fs = require('fs-extra');
const path = require('path');
const { createCanvas, registerFont } = require('canvas');
const MAX_RESTART_ATTEMPTS = 10;
const RESTART_COUNT_FILE = path.join(__dirname, 'cache', 'ngl_restart_attempts.json');
async function getRestartAttemptCount() {
    try {
        if (await fs.pathExists(RESTART_COUNT_FILE)) {
            const data = await fs.readJson(RESTART_COUNT_FILE);
            return data.attempts || 0;
        }
    } catch (e) {
        console.error("[PCODER] L·ªói khi ƒë·ªçc s·ªë l·∫ßn kh·ªüi ƒë·ªông l·∫°i (c√≥ th·ªÉ file b·ªã l·ªói ho·∫∑c kh√¥ng c√≥ quy·ªÅn ƒë·ªçc):", e.message);
    }
    return 0;
}
async function incrementRestartAttemptCount() {
    let attempts = await getRestartAttemptCount();
    attempts++;
    try {
        await fs.ensureDir(path.dirname(RESTART_COUNT_FILE)); 
        await fs.writeJson(RESTART_COUNT_FILE, { attempts });
    } catch (e) {
        console.error("[PCODER] L·ªói khi ghi s·ªë l·∫ßn kh·ªüi ƒë·ªông l·∫°i (ki·ªÉm tra quy·ªÅn ghi):", e.message);
    }
    return attempts;
}
async function resetRestartAttemptCount() {
    try {
        await fs.ensureDir(path.dirname(RESTART_COUNT_FILE));
        await fs.writeJson(RESTART_COUNT_FILE, { attempts: 0 });
        console.log("[PCODER] ƒê√£ reset b·ªô ƒë·∫øm s·ªë l·∫ßn kh·ªüi ƒë·ªông l·∫°i do l·ªói credit.");
    } catch (e) {
        console.error("[PCODER] L·ªói khi reset s·ªë l·∫ßn kh·ªüi ƒë·ªông l·∫°i:", e.message);
    }
}
module.exports.config = {
    name: "ngl",
    version: "2.2.2",
    hasPermssion: 0,
    credits: "Nguy·ªÖn Tr∆∞∆°ng Thi·ªán Ph√°t (pcoder)", 
    description:
        "spam NGL",
    commandCategory: "tools",
    usages: "[username/URL] [s·ªë l∆∞·ª£ng tin nh·∫Øn] [n·ªôi dung tin nh·∫Øn] [yes/no] | stop",
    cooldowns: 5,
};
const DEFAULT_FONT = 'Arial';
const CACHE_DIR_NGL = path.join(__dirname, 'cache', 'ngl_spam');
if (!fs.existsSync(CACHE_DIR_NGL)) {
    try {
        fs.mkdirSync(CACHE_DIR_NGL, { recursive: true });
    } catch (e) {
        console.error("[NGL] Kh√¥ng th·ªÉ t·∫°o th∆∞ m·ª•c cache cho NGL:", e.message);
    }
}
function roundRectCanvas(ctx, x, y, width, height, radius, fill, stroke) {
    if (typeof stroke === 'undefined') { stroke = true; }
    if (typeof radius === 'undefined') { radius = 5; }
    if (typeof radius === 'number') { radius = { tl: radius, tr: radius, br: radius, bl: radius }; }
    else {
        const defaultRadius = { tl: 0, tr: 0, br: 0, bl: 0 };
        for (const side in defaultRadius) { radius[side] = radius[side] || defaultRadius[side]; }
    }
    ctx.beginPath();
    ctx.moveTo(x + radius.tl, y);
    ctx.lineTo(x + width - radius.tr, y);
    ctx.quadraticCurveTo(x + width, y, x + width, y + radius.tr);
    ctx.lineTo(x + width, y + height - radius.br);
    ctx.quadraticCurveTo(x + width, y + height, x + width - radius.br, y + height);
    ctx.lineTo(x + radius.bl, y + height);
    ctx.quadraticCurveTo(x, y + height, x, y + height - radius.bl);
    ctx.lineTo(x, y + radius.tl);
    ctx.quadraticCurveTo(x, y, x + radius.tl, y);
    ctx.closePath();
    if (fill) { ctx.fill(); }
    if (stroke) { ctx.stroke(); }
}
function wrapTextCanvas(context, text, x, y, maxWidth, lineHeight, font, color) {
    context.font = font;
    context.fillStyle = color;
    const words = text.split(' ');
    let line = '';
    let testLine = '';
    let metrics;
    for (let n = 0; n < words.length; n++) {
        testLine = line + words[n] + ' ';
        metrics = context.measureText(testLine);
        if (metrics.width > maxWidth && n > 0) {
            context.fillText(line, x, y);
            line = words[n] + ' ';
            y += lineHeight;
        } else {
            line = testLine;
        }
    }
    context.fillText(line, x, y);
    return y + lineHeight;
}
async function createNglStatusCanvas(statusType, titleText, detailsArray = []) {
    const canvasWidth = 900;
    let canvasHeight = 200 + (detailsArray.length * 35);
    canvasHeight = Math.max(canvasHeight, 300);
    const canvas = createCanvas(canvasWidth, canvasHeight);
    const ctx = canvas.getContext('2d');
    const colors = {
        background: '#2C2F33', card: '#23272A', textPrimary: '#FFFFFF', textSecondary: '#B9BBBE',
        accentGreen: '#43B581', accentRed: '#F04747', accentYellow: '#FAA61A', accentBlue: '#7289DA', shadow: 'rgba(0,0,0,0.3)'
    };
    ctx.fillStyle = colors.background;
    ctx.fillRect(0, 0, canvasWidth, canvasHeight);
    const cardPadding = 30, cardX = cardPadding, cardY = cardPadding, cardWidth = canvasWidth - (cardPadding * 2), cardHeight = canvasHeight - (cardPadding * 2);
    ctx.fillStyle = colors.card;
    ctx.shadowColor = colors.shadow; ctx.shadowBlur = 10; ctx.shadowOffsetX = 0; ctx.shadowOffsetY = 4;
    roundRectCanvas(ctx, cardX, cardY, cardWidth, cardHeight, 15, true, false);
    ctx.shadowColor = 'transparent';
    let iconColor = colors.accentBlue;
    const iconOriginalX = cardX + 30, iconYPos = cardY + 55;
    let titleXOffset = 0;
    switch (statusType.toUpperCase()) {
        case 'STOP_CMD': case 'STOP': iconColor = colors.accentRed; ctx.font = `bold 40px "${DEFAULT_FONT}"`; ctx.fillStyle = iconColor; ctx.fillText("üõë", iconOriginalX, iconYPos); titleXOffset = 60; break;
        case 'ERROR': case 'NO_TASK': iconColor = colors.accentRed; ctx.font = `bold 40px "${DEFAULT_FONT}"`; ctx.fillStyle = iconColor; ctx.fillText("‚ö†Ô∏è", iconOriginalX, iconYPos); titleXOffset = 60; break;
        case 'START': iconColor = colors.accentYellow; titleXOffset = 5; break;
        case 'PROGRESS': iconColor = colors.accentBlue; titleXOffset = 5; break;
        case 'COMPLETE': iconColor = colors.accentGreen; titleXOffset = 5; break;
        default: titleXOffset = 5; break;
    }
    const titleX = iconOriginalX + titleXOffset, titleYVal = cardY + 60;
    ctx.font = `bold 28px "${DEFAULT_FONT}"`; ctx.fillStyle = colors.textPrimary; ctx.textAlign = 'left'; ctx.textBaseline = 'middle';
    ctx.fillText(titleText.toUpperCase(), titleX, titleYVal);
    const lineY = titleYVal + 30;
    ctx.strokeStyle = colors.textSecondary; ctx.lineWidth = 1; ctx.beginPath(); ctx.moveTo(cardX + 30, lineY); ctx.lineTo(cardX + cardWidth - 30, lineY); ctx.stroke();
    let currentY = lineY + 30;
    const detailX = cardX + 40, lineHeight = 30, maxTextWidth = cardWidth - 80;
    detailsArray.forEach(detail => {
        if (currentY < cardY + cardHeight - 20) {
            let detailText = detail.text, detailColor = detail.color || colors.textSecondary;
            if (detail.text.includes("Th√†nh c√¥ng:")) { detailColor = colors.accentGreen; } else if (detail.text.includes("Th·∫•t b·∫°i:")) { detailColor = colors.accentRed; }
            currentY = wrapTextCanvas(ctx, detailText, detailX, currentY, maxTextWidth, lineHeight, `18px "${DEFAULT_FONT}"`, detailColor);
        }
    });
    const creditName = Buffer.from("Tmd1eeG7hW4gVHLGsMahbmcgVGhp4buHbiBQaMOhdCAocGNvZGVyKQ==", 'base64').toString('utf8');
    const footerText = `NGL Spammer Bot - by ${creditName}`;
    ctx.font = `italic 14px "${DEFAULT_FONT}"`; ctx.fillStyle = colors.textSecondary; ctx.textAlign = 'center';
    ctx.fillText(footerText, canvasWidth / 2, canvasHeight - cardPadding - 10);
    const imagePath = path.join(CACHE_DIR_NGL, `ngl_status_${Date.now()}.png`);
    return new Promise((resolve, reject) => {
        const out = fs.createWriteStream(imagePath);
        const stream = canvas.createPNGStream();
        stream.pipe(out);
        out.on('finish', () => resolve(imagePath));
        out.on('error', (err) => { console.error("[NGL_CANVAS] L·ªói khi ghi stream PNG:", err); reject(err); });
        stream.on('error', (err) => { console.error("[NGL_CANVAS] L·ªói trong stream PNG:", err); reject(err); });
    });
}

const userAgentsPath = path.join(__dirname, '../user-agents.js');
let userAgents = [];
(async function initUserAgents() {
    try {
        if (!await fs.pathExists(userAgentsPath)) {
            console.log("[NGL] ƒêang t·∫£i danh s√°ch user-agents m·ªõi...");
            const response = await axios.get('https://raw.githubusercontent.com/Kenne400k/commands/refs/heads/main/user.js');
            await fs.writeFile(userAgentsPath, response.data); userAgents = require("../user-agents");
        } else {
            userAgents = require("../user-agents");
            if (!Array.isArray(userAgents) || userAgents.length === 0) {
                console.warn("[NGL] File user-agents.js kh√¥ng h·ª£p l·ªá. T·∫£i l·∫°i...");
                const response = await axios.get('https://raw.githubusercontent.com/Kenne400k/commands/refs/heads/main/user.js');
                await fs.writeFile(userAgentsPath, response.data); userAgents = require("../user-agents");
            }
        }
    } catch (error) {
        console.error("[NGL] L·ªói kh·ªüi t·∫°o/t·∫£i user-agents:", error.message, ". S·ª≠ d·ª•ng danh s√°ch m·∫∑c ƒë·ªãnh.");
        userAgents = ['Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'];
    }
})();

const runningTasks = new Map();
const uaMap = new Map();
const MAX_CONCURRENT = 5;
const UA_COOLDOWN = 10000;

function randomString(length = 10, chars = "abcdefghijklmnopqrstuvwxyz0123456789") {
    let result = ""; for (let i = 0; i < length; i++) { result += chars.charAt(Math.floor(Math.random() * chars.length)); } return result;
}
function getRandomEmoji() {
    const emojis = [" üòä"," üòé"," üòç"," üòâ"," üòÅ"," üòÑ"," üòÉ"," üôÇ"," üòÜ"," üòÖ"," ü§£"," üòÇ"," üòã"," üòõ"," üòú"," ü§™"," ü§©"," ü•∞"," üòá"," üôÉ"," ü•π"," üòå"," ü§ó"," üòè"," ü§≠"," ü´¢"," ü´†"," ü§´"," üò≠"," üò¢"," üò•"," üòì"," üòû"," üòî"," üôÅ"," ‚òπÔ∏è"," üò†"," üò°"," ü§¨"," üò§"," üòñ"," üò´"," üò©"," ü•∫"," üò±"," üò®"," üò∞"," üòµ"," ü§Ø"," üò≥"," üò¨"," ü´£"," ü•¥"," ü§¢"," ü§Æ"," üò∑"," ü§í"," ü§ï"," ü§ß"," ü•∂"," ü•µ"," üòà"," üëø"," üíÄ"," üëª"," üëΩ"," üò∫"," üò∏"," üòπ"," üòª"," üòº"," üòΩ"," üôÄ"," üòø"," üòæ"," ü§°"," ‚ù§Ô∏è"," üß°"," üíõ"," üíö"," üíô"," üíú"," ü§é"," üñ§"," ü§ç"," üíì"," üíó"," üíñ"," üíò"," üíù"," üíû"," üíï",];
    return emojis[Math.floor(Math.random() * emojis.length)];
}
function convertToUsername(inputStr) {
    inputStr = inputStr.trim();
    if (inputStr.startsWith("https://ngl.link/")) {
        try { const url = new URL(inputStr); if (url.hostname !== "ngl.link") return null; return url.pathname.replace("/", "") || null; } catch (error) { return null; }
    } return inputStr || null;
}
async function checkUserExists(username) {
    try {
        const response = await axios.get(`https://ngl.link/${username}`, { headers: { "User-Agent": userAgents[Math.floor(Math.random() * userAgents.length)], Accept: "text/html" }, timeout: 15000 });
        return !response.data.includes("Could not find user");
    } catch (error) { return false; }
}
function getRandomizedContent(baseContent, enableEmoji) { let content = baseContent; if (enableEmoji) content += getRandomEmoji(); return content; }

async function sendSingleMessage(username, content, deviceId, mixpanelStr) {
    let randomUserAgent; let now = Date.now(); let attempts = 0;
    do {
        randomUserAgent = userAgents[Math.floor(Math.random() * userAgents.length)];
        const lastUsed = uaMap.get(randomUserAgent) || 0;
        if (now - lastUsed > UA_COOLDOWN || attempts > 10) { uaMap.set(randomUserAgent, now); break; } attempts++;
    } while (attempts < 20);
    const languages = ["vi-VN,vi;q=0.9,fr-FR;q=0.8,fr;q=0.7,en-US;q=0.6,en;q=0.5", "en-US,en;q=0.9", "vi-VN,vi;q=0.9,en-US;q=0.8,en;q=0.7"];
    const headers = {
        Accept: "*/*", "Accept-Encoding": "gzip, deflate, br, zstd", "Accept-Language": languages[Math.floor(Math.random() * languages.length)],
        Connection: Math.random() > 0.2 ? "keep-alive" : "close", "Content-Type": "application/x-www-form-urlencoded; charset=UTF-8",
        Cookie: `_ga=GA1.1.${Math.floor(Math.random()*9e9)+1e9}.${Math.floor(Math.random()*9e9)+1e9}; mp_${randomString(32)}_mixpanel=${mixpanelStr}`,
        Host: "ngl.link", Origin: "https://ngl.link", Referer: `https://ngl.link/${username}`,
        "sec-ch-ua": '"Chromium";v="136", "Google Chrome";v="136", "Not.A/Brand";v="99"', "sec-ch-ua-mobile": Math.random() > 0.7 ? "?1" : "?0",
        "sec-ch-ua-platform": ['"Windows"', '"macOS"', '"Android"', '"iOS"', '"Linux"'][Math.floor(Math.random() * 5)],
        "Sec-Fetch-Dest": "empty", "Sec-Fetch-Mode": "cors", "Sec-Fetch-Site": "same-origin", "User-Agent": randomUserAgent,
        "X-Requested-With": "XMLHttpRequest", "Cache-Control": Math.random() > 0.5 ? "no-cache" : "max-age=0", Pragma: Math.random() > 0.5 ? "no-cache" : "", Priority: ["high", "low", "auto"][Math.floor(Math.random() * 3)],
    };
    const data = { username, question: content, deviceId, gameSlug: "", referrer: "", lang: Math.random() > 0.5 ? "en" : "vi" };
    const formData = new URLSearchParams(data).toString();
    try {
        const response = await axios.post("https://ngl.link/api/submit", formData, { headers, timeout: 15000 });
        return { success: true, status: response.status };
    } catch (error) {
        if (error.response && error.response.status === 429) uaMap.set(randomUserAgent, now + 30000);
        return { success: false, error: error.message, status: error.response ? error.response.status : null };
    }
}

async function sendNglMessagesWithWorkers(api, threadID, username, numMessages, baseQuestion, enableEmoji, taskState) {
    const deviceId = `${randomString(8)}-${randomString(4)}-${randomString(4)}-${randomString(4)}-${randomString(12)}`;
    const mixpanelData = { distinct_id: `$device:${deviceId}`, device_id: deviceId, initial_referrer: "$direct", initial_referring_domain: "$direct", mps: {}, mpso: { initial_referrer: "$direct", initial_referring_domain: "$direct" }, mpus: {}, };
    const mixpanelStr = encodeURIComponent(JSON.stringify(mixpanelData));
    const messageQueue = []; let successCount = 0; let errorCount = 0; const startTime = Date.now();
    try {
        const startDetails = [ { text: `Ng∆∞·ªùi nh·∫≠n: ${username}` }, { text: `S·ªë l∆∞·ª£ng: ${numMessages} tin` }, { text: `N·ªôi dung g·ªëc: ${baseQuestion.substring(0, 60)}${baseQuestion.length > 60 ? "..." : ""}` }, { text: `Th√™m emoji ng·∫´u nhi√™n: ${enableEmoji ? 'C√≥' : 'Kh√¥ng'}` }];
        const startImagePath = await createNglStatusCanvas('START', 'B·∫ÆT ƒê·∫¶U SPAM NGL', startDetails);
        api.sendMessage({ attachment: fs.createReadStream(startImagePath) }, threadID, () => fs.unlinkSync(startImagePath));
    } catch (e) { console.error("[NGL] L·ªói t·∫°o canvas b·∫Øt ƒë·∫ßu:", e); api.sendMessage(`‚è≥ B·∫Øt ƒë·∫ßu g·ª≠i ${numMessages} tin nh·∫Øn ƒë·∫øn ${username}... (L·ªói t·∫°o ·∫£nh)`, threadID); }
    for (let i = 0; i < numMessages; i++) { messageQueue.push(getRandomizedContent(baseQuestion, enableEmoji)); }
    async function worker() {
        while (messageQueue.length > 0 && !taskState.shouldStop) {
            const content = messageQueue.shift(); await new Promise(resolve => setTimeout(resolve, 1500 + Math.random() * 1500));
            const result = await sendSingleMessage(username, content, deviceId, mixpanelStr);
            if (result.success) successCount++; else { errorCount++; if (result.status === 429) await new Promise(resolve => setTimeout(resolve, 5000 + Math.random() * 5000)); else if (!result.success) await new Promise(resolve => setTimeout(resolve, 3000 + Math.random() * 2000)); }
        }
    }
    const progressInterval = setInterval(async () => {
        if (taskState.shouldStop) { clearInterval(progressInterval); return; }
        const elapsedSeconds = Math.floor((Date.now() - startTime) / 1000);
        if (elapsedSeconds > 0 && elapsedSeconds % 60 === 0) {
            const progressDetails = [ { text: `Ng∆∞·ªùi nh·∫≠n: ${username}` }, { text: `ƒê√£ g·ª≠i: ${successCount}/${numMessages}` }, { text: `Th·∫•t b·∫°i: ${errorCount}` }, { text: `Th·ªùi gian ch·∫°y: ${elapsedSeconds} gi√¢y` } ];
            try { const progressImagePath = await createNglStatusCanvas('PROGRESS', 'TI·∫æN ƒê·ªò SPAM NGL', progressDetails); api.sendMessage({ attachment: fs.createReadStream(progressImagePath)}, threadID, () => fs.unlinkSync(progressImagePath)); }
            catch (e) { console.error("[NGL] L·ªói t·∫°o canvas ti·∫øn ƒë·ªô:", e); api.sendMessage(`‚åõ Ti·∫øn ƒë·ªô: ${successCount}/${numMessages} tin nh·∫Øn ƒë√£ g·ª≠i (${errorCount} th·∫•t b·∫°i)`, threadID); }
        }
    }, 60000);
    const workerPromises = Array.from({ length: Math.min(MAX_CONCURRENT, numMessages) }, () => worker());
    await Promise.all(workerPromises); clearInterval(progressInterval);
    const totalTime = ((Date.now() - startTime) / 1000).toFixed(2);
    if (taskState.shouldStop) {
        const stopDetails = [ { text: `Ng∆∞·ªùi nh·∫≠n: ${username}` }, { text: `N·ªôi dung g·ªëc: ${baseQuestion.substring(0, 60)}${baseQuestion.length > 60 ? "..." : ""}` }, { text: `Th√†nh c√¥ng: ${successCount}`, color: '#43B581' }, { text: `Th·∫•t b·∫°i: ${errorCount}`, color: '#F04747' } ];
        try { const stopImagePath = await createNglStatusCanvas('STOP', 'ƒê√É D·ª™NG SPAM NGL', stopDetails); api.sendMessage({ attachment: fs.createReadStream(stopImagePath) }, threadID, () => fs.unlinkSync(stopImagePath)); }
        catch (e) { console.error("[NGL] L·ªói t·∫°o canvas d·ª´ng:", e); api.sendMessage(`üõë ƒê√£ d·ª´ng g·ª≠i.\nTh√†nh c√¥ng: ${successCount}, Th·∫•t b·∫°i: ${errorCount}`, threadID); }
    } else {
        const completeDetails = [ { text: `Ng∆∞·ªùi nh·∫≠n: ${username}` }, { text: `N·ªôi dung g·ªëc: ${baseQuestion.substring(0, 60)}${baseQuestion.length > 60 ? "..." : ""}` }, { text: `Th√†nh c√¥ng: ${successCount}`, color: '#43B581' }, { text: `Th·∫•t b·∫°i: ${errorCount}`, color: '#F04747' }, { text: `T·ªïng th·ªùi gian: ${totalTime}s` } ];
        try { const completeImagePath = await createNglStatusCanvas('COMPLETE', 'HO√ÄN TH√ÄNH SPAM NGL', completeDetails); api.sendMessage({ attachment: fs.createReadStream(completeImagePath) }, threadID, () => fs.unlinkSync(completeImagePath)); }
        catch (e) { console.error("[NGL] L·ªói t·∫°o canvas ho√†n th√†nh:", e); api.sendMessage(`‚úÖ Ho√†n th√†nh.\nTh√†nh c√¥ng: ${successCount}, Th·∫•t b·∫°i: ${errorCount}.\nT·ªïng th·ªùi gian: ${totalTime}s`, threadID); }
    }
}

module.exports.run = async function ({ api, event, args }) {
    const { threadID, messageID } = event;
    const ec_b64 = "Tmd1eeG7hW4gVHLGsMahbmcgVGhp4buHbiBQaMOhdCAocGNvZGVyKQ=="; 
    const EXPECTED_CREDITS = Buffer.from(ec_b64, 'base64').toString('utf8');
    if (module.exports.config.credits !== EXPECTED_CREDITS) {
        for (let i = 0; i < 5; i++) {
            console.warn(`[PCODER] C·∫¢NH B√ÅO NGHI√äM TR·ªåNG: CREDIT ƒê√É B·ªä THAY ƒê·ªîI! AI CHO PH√âP THAY ƒê·ªîI CREDIT? Credit g·ªëc ph·∫£i l√†: "${EXPECTED_CREDITS}". Credit hi·ªán t·∫°i trong file code: "${module.exports.config.credits}"`);
        }
        api.sendMessage(`[PCODER] C·∫¢NH B√ÅO KH·∫®N C·∫§P:\n\nTh√¥ng tin credits c·ªßa module "${module.exports.config.name}" ƒë√£ b·ªã thay ƒë·ªïi tr√°i ph√©p.\n- Credit g·ªëc: "${EXPECTED_CREDITS}"\n- Credit hi·ªán t·∫°i: "${module.exports.config.credits}"\n\nƒê√¢y l√† h√†nh vi vi ph·∫°m ƒëi·ªÅu kho·∫£n s·ª≠ d·ª•ng. H·ªá th·ªëng s·∫Ω th·ª±c hi·ªán c√°c bi·ªán ph√°p c·∫ßn thi·∫øt. Vui l√≤ng kh√¥i ph·ª•c credit g·ªëc ho·∫∑c li√™n h·ªá ng∆∞·ªùi ph√°t tri·ªÉn ("${EXPECTED_CREDITS}").`, threadID);
        
        const currentAttempts = await incrementRestartAttemptCount();

        if (currentAttempts >= MAX_RESTART_ATTEMPTS) {
            console.error(`[PCODER] FATAL: ƒê√£ ƒë·∫°t t·ªëi ƒëa (${MAX_RESTART_ATTEMPTS}) l·∫ßn kh·ªüi ƒë·ªông l·∫°i do thay ƒë·ªïi credits cho module "${module.exports.config.name}". T·∫ÆT BOT Vƒ®NH VI·ªÑN ƒê·ªÇ B·∫¢O V·ªÜ T√çNH TO√ÄN V·∫∏N.`);
            api.sendMessage(`[PCODER] L·ªñI H·ªÜ TH·ªêNG NGHI√äM TR·ªåNG:\n\nModule "${module.exports.config.name}" ƒë√£ b·ªã thay ƒë·ªïi credits qu√° nhi·ªÅu l·∫ßn. ƒê·ªÉ ƒë·∫£m b·∫£o an to√†n v√† tu√¢n th·ªß, bot s·∫Ω t·ª± t·∫Øt. Vui l√≤ng li√™n h·ªá ng∆∞·ªùi ph√°t tri·ªÉn g·ªëc ("${EXPECTED_CREDITS}") ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ n·∫øu b·∫°n kh√¥ng ph·∫£i l√† ng∆∞·ªùi ch·ªânh s·ª≠a.`, threadID);
            await resetRestartAttemptCount(); 
            setTimeout(() => process.exit(0), 5000); 
            return; 
        } else {
            console.log(`[PCODER] ƒêang c·ªë g·∫Øng kh·ªüi ƒë·ªông l·∫°i bot do ph√°t hi·ªán credit b·ªã thay ƒë·ªïi ·ªü module "${module.exports.config.name}"... (L·∫ßn ${currentAttempts}/${MAX_RESTART_ATTEMPTS})`);
            api.sendMessage(`[PCODER] Module "${module.exports.config.name}": Ph√°t hi·ªán credit kh√¥ng h·ª£p l·ªá. ƒêang th·ª≠ kh·ªüi ƒë·ªông l·∫°i bot... (L·∫ßn th·ª≠: ${currentAttempts}/${MAX_RESTART_ATTEMPTS})`, threadID);
            setTimeout(() => process.exit(1), 5000); 
            return; 
        }
    } else {
        const attemptsMade = await getRestartAttemptCount();
        if (attemptsMade > 0) {
            console.log(`[PCODER] Credit c·ªßa module "${module.exports.config.name}" ƒë√£ ch√≠nh x√°c ("${EXPECTED_CREDITS}"). Reset b·ªô ƒë·∫øm l·ªói thay ƒë·ªïi credit.`);
            await resetRestartAttemptCount();
        }
    }

    if (args[0]?.toLowerCase() === "stop") {
        if (runningTasks.has(threadID)) {
            runningTasks.get(threadID).shouldStop = true;
            try { const stopCmdImagePath = await createNglStatusCanvas('STOP_CMD', 'L·ªÜNH D·ª™NG NGL', [{text:"ƒê√£ nh·∫≠n l·ªánh d·ª´ng. ƒêang x·ª≠ l√Ω d·ª´ng c√°c ti·∫øn tr√¨nh..."}]); return api.sendMessage({ attachment: fs.createReadStream(stopCmdImagePath) }, threadID, () => fs.unlinkSync(stopCmdImagePath), messageID); }
            catch (e) { console.error("[NGL] L·ªói t·∫°o canvas l·ªánh d·ª´ng:", e); return api.sendMessage("üõë ƒê√£ g·ª≠i l·ªánh d·ª´ng qu√° tr√¨nh g·ª≠i tin nh·∫Øn NGL. (L·ªói t·∫°o ·∫£nh)", threadID, messageID); }
        } else {
            try { const noTaskImagePath = await createNglStatusCanvas('NO_TASK', 'KH√îNG C√ì T√ÅC V·ª§ NGL', [{text:"Hi·ªán kh√¥ng c√≥ ti·∫øn tr√¨nh spam NGL n√†o ƒëang ch·∫°y trong nh√≥m n√†y."}]); return api.sendMessage({ attachment: fs.createReadStream(noTaskImagePath) }, threadID, () => fs.unlinkSync(noTaskImagePath), messageID); }
            catch (e) { console.error("[NGL] L·ªói t·∫°o canvas kh√¥ng c√≥ t√°c v·ª•:", e); return api.sendMessage("‚ö†Ô∏è Kh√¥ng c√≥ ti·∫øn tr√¨nh n√†o ƒëang ch·∫°y ƒë·ªÉ d·ª´ng l·∫°i. (L·ªói t·∫°o ·∫£nh)", threadID, messageID); }
        }
    }

    if (args.length < 3) { return api.sendMessage(`‚ùå Sai c√∫ ph√°p!\nS·ª≠ d·ª•ng: ${module.exports.config.usages}`, threadID, messageID); }
    const userInput = args[0]; const numMessages = parseInt(args[1]); let enableEmoji = false; let question;
    const lastArg = args[args.length - 1]?.toLowerCase();
    if (lastArg === "yes" || lastArg === "no") { enableEmoji = lastArg === "yes"; question = args.slice(2, args.length - 1).join(" ") || "G·ª≠i t·ª´ NGL Bot"; }
    else { question = args.slice(2).join(" ") || "G·ª≠i t·ª´ NGL Bot"; }
    if (isNaN(numMessages) || numMessages < 1 || numMessages > 1000) { return api.sendMessage("‚ö†Ô∏è S·ªë l∆∞·ª£ng tin nh·∫Øn ph·∫£i l√† m·ªôt s·ªë t·ª´ 1 ƒë·∫øn 1000.", threadID, messageID); }
    let username = convertToUsername(userInput);
    if (!username) { return api.sendMessage("‚ö†Ô∏è ƒê·ªãnh d·∫°ng username ho·∫∑c URL NGL kh√¥ng h·ª£p l·ªá.", threadID, messageID); }
    try { const userExists = await checkUserExists(username); if (!userExists) return api.sendMessage(`‚ö†Ô∏è Ng∆∞·ªùi d√πng NGL '${username}' kh√¥ng t·ªìn t·∫°i.`, threadID, messageID); }
    catch (error) { return api.sendMessage("‚ùå L·ªói khi ki·ªÉm tra username NGL: " + error.message, threadID, messageID); }
    if (runningTasks.has(threadID)) {
        try { const alreadyRunningPath = await createNglStatusCanvas('ERROR', 'T√ÅC V·ª§ NGL ƒêANG CH·∫†Y', [{text:`M·ªôt ti·∫øn tr√¨nh spam NGL kh√°c ƒëang ch·∫°y trong nh√≥m n√†y.\nVui l√≤ng ƒë·ª£i ho√†n th√†nh ho·∫∑c d√πng l·ªánh "${module.exports.config.name} stop".`}]); return api.sendMessage({ attachment: fs.createReadStream(alreadyRunningPath) }, threadID, () => fs.unlinkSync(alreadyRunningPath), messageID); }
        catch (e) { console.error("[NGL] L·ªói t·∫°o canvas t√°c v·ª• ƒëang ch·∫°y:", e); return api.sendMessage("‚ö†Ô∏è M·ªôt ti·∫øn tr√¨nh spam NGL kh√°c ƒëang ch·∫°y trong nh√≥m n√†y. Vui l√≤ng ƒë·ª£i ho·∫∑c d√πng l·ªánh stop. (L·ªói t·∫°o ·∫£nh)", threadID, messageID); }
    }
    const taskState = { shouldStop: false }; runningTasks.set(threadID, taskState);
    try { await sendNglMessagesWithWorkers(api, threadID, username, numMessages, question, enableEmoji, taskState); }
    catch (error) {
        console.error("[NGL] L·ªói nghi√™m tr·ªçng trong qu√° tr√¨nh g·ª≠i:", error);
        try { const errorPath = await createNglStatusCanvas('ERROR', 'L·ªñI SPAM NGL', [{text:`ƒê√£ x·∫£y ra l·ªói: ${error.message}`}]); api.sendMessage({ attachment: fs.createReadStream(errorPath) }, threadID, () => fs.unlinkSync(errorPath)); }
        catch (e) { api.sendMessage(`‚ùå L·ªói khi g·ª≠i tin nh·∫Øn NGL: ${error.message} (L·ªói t·∫°o ·∫£nh b√°o l·ªói)`, threadID); }
    } finally { if (runningTasks.has(threadID)) { runningTasks.delete(threadID); } }
};

module.exports.handleReply = async function ({ api, event, handleReply }) { return; };
